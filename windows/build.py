import os
import re
import shutil
import subprocess
import sys
import json

# Paths to find executables and libraries
RUSTUP = f"{os.environ['HOMEPATH']}/.cargo/bin/rustup.exe"
WIX = "C:/Program Files (x86)/WiX Toolset v3.11"
# Rust toolchain version to use
RUST_TOOLCHAIN = 'stable-i686-pc-windows-gnu'
CARGO = [RUSTUP, "run", RUST_TOOLCHAIN, "cargo"]
# Executables to install
DEBUG = '--debug' in sys.argv
TARGET_DIR = f"../target/{'debug' if DEBUG else 'release'}"
EXES = {
    f"{TARGET_DIR}/examples/keyboard_layout.exe",
}

DLL_RE = r"(?<==> ).*\\mingw32\\bin\\(\S+.dll)"


# Use ntldd to find the mingw dlls required by a .exe
def find_depends(exe):
    output = subprocess.check_output(['ntldd.exe', '-R', exe], universal_newlines=True)
    dlls = set()
    for l in output.splitlines():
        m = re.search(DLL_RE, l, re.IGNORECASE)
        if m:
            dlls.add((m.group(0), m.group(1)))
    return dlls


# Build application with rustup
cmd = CARGO + ['build', '--examples']
if not DEBUG:
    cmd.append('--release')
subprocess.check_call(cmd)

# Generate set of all required dlls
dlls = set()
for i in EXES:
    dlls = dlls.union(find_depends(i))

# Generate libraries.wxi
with open('libraries.wxi', 'w') as f:
    f.write("<!-- Generated by build.py -->\n")
    f.write('<Include>\n')

    for _, i in dlls:
        id_ = i.replace('.dll', '').replace('-', '_').replace('+', '')
        f.write(f"    <Component Id='{id_}' Feature='Complete' Guid='*'>\n")
        f.write(f"        <File Name='{i}' Source='out/{i}' />\n")
        f.write(f"    </Component>\n")

    f.write('</Include>\n')

# Copy executables and libraries
if os.path.exists('out'):
    shutil.rmtree('out')
os.mkdir('out')
for i in EXES:
    filename = i.split('/')[-1]
    print(f"Strip {i} -> out/{filename}")
    subprocess.check_call([f"strip.exe", '-o', f"out/{filename}", i])
for src, filename in dlls:
    print(f"Copy {src} -> out/{filename}")
    shutil.copy(f"{src}", 'out')

# Extract crate version from cargo
meta_str = subprocess.check_output(CARGO + ["metadata", "--format-version", "1", "--no-deps"])
meta = json.loads(meta_str)
package = next(i for i in meta['packages'] if i['name'] == 'system76-keyboard-configurator')
crate_version = package['version']

# Generate Icon
# TODO: Replace with final version
subprocess.check_call(["convert", "-background", "#564e48", "-fill", "white", "-size", "256x256", "-gravity", "center", "label:Keyboard\nConfigurator", "out/keyboard-configurator.ico"])

# Build .msi
subprocess.check_call([f"{WIX}/bin/candle.exe", ".\keyboard-configurator.wxs", f"-dcrate_version={crate_version}"])
subprocess.check_call([f"{WIX}/bin/light.exe", "-ext", "WixUIExtension", ".\keyboard-configurator.wixobj"])
